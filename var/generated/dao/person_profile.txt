```go
***filename: person_profile/type.go
package person_profile
                                                                                                            

import (
    "github.com/nexsoft-git/nexcommon/context"
    "database/sql"
    "nexsoft.co.id/example/repository"
)

type PersonProfileDAO interface {
    
    InsertPersonProfile(
        ctx *context.ContextModel,
        tx *sql.Tx,
        dtoIn repository.PersonProfileModel,
    ) (
        repository.PersonProfileModel, 
        error, 
    )
    
    GetDataByUniqueData(
        ctx *context.ContextModel,
        dtoIn repository.PersonProfileModel,
    )(
        result repository.PersonProfileModel,
        err error,
    )

    GetPersonProfileForUpdate(
        ctx *context.ContextModel,
        tx *sql.Tx,
        uuid_key string,
    ) (
        repository.PersonProfileModel,
        error,
    )

}

***filename: person_profile/postgresql.go
package person_profile

import (
    "database/sql"
    "github.com/nexsoft-git/nexcommon/dao"
)

type person_profilePostgresqlSQLDAO struct {
    dao.GetListDataDAO
    db *sql.DB
}

func NewPersonProfilePostgresqlSQLDAO(
    db *sql.DB,
) PersonProfileDAO {
    return &person_profilePostgresqlSQLDAO{
        GetListDataDAO: dao.GetListDataDAO{
            DB: db,
        },
        db: db,
    }
}

***filename: person_profile/insert_person_profile.go
package person_profile

import (
    //you allowed to add new import and delete the unused import from this section for imported package on file insert_person_profile.go every file will containing 1 function
    "fmt"
    "database/sql"
    "github.com/nexsoft-git/nexcommon/context"
    "github.com/nexsoft-git/nexcommon/dao"
    "nexsoft.co.id/example/repository"
)

// Descriptions: This function will insert a new record into the person_profile table.
func (d *person_profilePostgresqlSQLDAO) InsertPersonProfile(
     ctx *context.ContextModel,
     tx *sql.Tx,
     dtoIn repository.PersonProfileModel,
) (
     repository.PersonProfileModel, 
     error, 
) {
    //TODO Implement the DAO function here
    // @Affected Field: created_at, created_by, created_client, updated_at, updated_by, updated_client
    // @Affected Table: dao.GetDBTable(ctx, "person_profile")  
    // @Valid Search:
    // - id : The unique identifier for the person profile
    // - name : The name of the person
    // - age : The age of the person
    // - date_of_birth : The date of birth of the person
}

***filename: person_profile/get_data_by_unique_data.go
package person_profile

import (
    "database/sql"
    "fmt"
    "strings"
    "github.com/nexsoft-git/nexcommon/context"
    "github.com/nexsoft-git/nexcommon/dao"
    "nexsoft.co.id/example/repository"
)

// Descriptions: Check is data is exist before inserting/updating
func (d *person_profilePostgresqlSQLDAO) GetDataByUniqueData(
      ctx *context.ContextModel,
      dtoIn repository.PersonProfileModel,
)(
    result repository.PersonProfileModel,
    err error,
){
    
    return

}

***filename: person_profile/get_person_profile_for_update.go
package person_profile

import (
    "fmt"
    "database/sql"
    "github.com/nexsoft-git/nexcommon/context"
    "github.com/nexsoft-git/nexcommon/dao"
    "nexsoft.co.id/example/repository"
)

// Descriptions: Get Data from database for optimistic lock
func (d *person_profilePostgresqlSQLDAO) GetPersonProfileForUpdate(
    ctx *context.ContextModel,
    tx *sql.Tx,
    uuid_key string,
) (
    repository.PersonProfileModel,
    error,
) {
    query := fmt.Sprintf(`
        SELECT id, updated_at
        FROM %s
        WHERE uuid_key = $1
    `, dao.GetDBTable(ctx, "person_profile"))

    param = []interface{}{uuid_key}
    if ctx.Limitation.UserID != 0 {
        query += " AND created_by = $2 "
        param = param.append(ctx.Limitation.UserID)
    }

    query += " FOR UPDATE "

    stmt, err := tx.Prepare(query)
    if err != nil {
        return repository.PersonProfileModel{}, err
    }

    var model repository.PersonProfileModel
    err = stmt.QueryRow(param...).Scan(&model.ID, &model.UpdatedAt)

    return model, err
}

```