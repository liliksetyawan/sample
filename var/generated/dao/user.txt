```go
***filename: user/type.go
package user
                                                                                                            

import (
    "github.com/nexsoft-git/nexcommon/context"
    "database/sql"
    "nexsoft.co.id/example/repository"
)

type UserDAO interface {
    
    InsertUser(
        ctx *context.ContextModel,
        tx *sql.Tx,
        dtoIn repository.UserModel,
    ) (
        repository.UserModel, 
        error, 
    )
    
    GetDataByUniqueData(
        ctx *context.ContextModel,
        dtoIn repository.UserModel,
    )(
        result repository.UserModel,
        err error,
    )

    GetUserForUpdate(
        ctx *context.ContextModel,
        tx *sql.Tx,
        uuid_key string,
    ) (
        repository.UserModel,
        error,
    )

}

***filename: user/postgresql.go
package user

import (
    "database/sql"
    "github.com/nexsoft-git/nexcommon/dao"
)

type userPostgresqlSQLDAO struct {
    dao.GetListDataDAO
    db *sql.DB
}

func NewUserPostgresqlSQLDAO(
    db *sql.DB,
) UserDAO {
    return &userPostgresqlSQLDAO{
        GetListDataDAO: dao.GetListDataDAO{
            DB: db,
        },
        db: db,
    }
}

***filename: user/insert_user.go
package user

import (
    //you allowed to add new import and delete the unused import from this section for imported package on file insert_user.go every file will containing 1 function
    "fmt"
    "database/sql"
    "github.com/nexsoft-git/nexcommon/context"
    "github.com/nexsoft-git/nexcommon/dao"
    "nexsoft.co.id/example/repository"
)

// Descriptions: Insert a new user record
func (d *userPostgresqlSQLDAO) InsertUser(
     ctx *context.ContextModel,
     tx *sql.Tx,
     dtoIn repository.UserModel,
) (
     repository.UserModel, 
     error, 
) {
    //TODO Implement the DAO function here
    // @Affected Field: auth_user_id, client_id, user_code, username, created_at, created_by, created_client, updated_at, updated_by, updated_client
    // @Affected Table: dao.GetDBTable(ctx, "user") 
}

***filename: user/get_data_by_unique_data.go
package user

import (
    "fmt"
    "github.com/nexsoft-git/nexcommon/context"
    "github.com/nexsoft-git/nexcommon/dao"
    "nexsoft.co.id/example/repository"
)

// Descriptions: Check is data is exist before inserting/updating
func (d *userPostgresqlSQLDAO) GetDataByUniqueData(
      ctx *context.ContextModel,
      dtoIn repository.UserModel,
)(
    result repository.UserModel,
    err error,
){
    
    //No Unique Constraint on the database, return empty result
    return

}

***filename: user/get_user_for_update.go
package user

import (
    "fmt"
    "database/sql"
    "github.com/nexsoft-git/nexcommon/context"
    "github.com/nexsoft-git/nexcommon/dao"
    "nexsoft.co.id/example/repository"
)

// Descriptions: Get Data from database for optimistic lock
func (d *userPostgresqlSQLDAO) GetUserForUpdate(
    ctx *context.ContextModel,
    tx *sql.Tx,
    uuid_key string,
) (
    repository.UserModel,
    error,
) {
    query := fmt.Sprintf(`
        SELECT id, updated_at
        FROM %s
        WHERE uuid_key = $1
    `, dao.GetDBTable(ctx, "user"))

    param = []interface{}{uuid_key}
    if ctx.Limitation.UserID != 0 {
        query += " AND created_by = $2 "
        param = param.append(ctx.Limitation.UserID)
    }

    query += " FOR UPDATE "

    stmt, err := tx.Prepare(query)
    if err != nil {
        return repository.UserModel{}, err
    }

    var model repository.UserModel
    err = stmt.QueryRow(param...).Scan(&model.ID, &model.UpdatedAt)

    return model, err
}

```